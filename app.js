/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/core/PieceFactory.ts":
/*!**********************************!*\
  !*** ./src/core/PieceFactory.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _pawn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pawn */ \"./src/core/pawn.ts\");\n/* harmony import */ var _king__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./king */ \"./src/core/king.ts\");\n/* harmony import */ var _knight__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./knight */ \"./src/core/knight.ts\");\n/* harmony import */ var _queen__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./queen */ \"./src/core/queen.ts\");\n/* harmony import */ var _rook__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./rook */ \"./src/core/rook.ts\");\n/* harmony import */ var _bishop__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./bishop */ \"./src/core/bishop.ts\");\n\n\n\n\n\n\nvar PieceFactory = /** @class */ (function () {\n    function PieceFactory() {\n    }\n    PieceFactory.prototype.createDarkBishop = function () {\n        return new _bishop__WEBPACK_IMPORTED_MODULE_5__[\"default\"](false);\n    };\n    PieceFactory.prototype.createLightBishop = function () {\n        return new _bishop__WEBPACK_IMPORTED_MODULE_5__[\"default\"](true);\n    };\n    PieceFactory.prototype.createDarkRook = function () {\n        return new _rook__WEBPACK_IMPORTED_MODULE_4__[\"default\"](false);\n    };\n    PieceFactory.prototype.createLightRook = function () {\n        return new _rook__WEBPACK_IMPORTED_MODULE_4__[\"default\"](true);\n    };\n    PieceFactory.prototype.createDarkKight = function () {\n        return new _knight__WEBPACK_IMPORTED_MODULE_2__[\"default\"](false);\n    };\n    PieceFactory.prototype.createLightKight = function () {\n        return new _knight__WEBPACK_IMPORTED_MODULE_2__[\"default\"](true);\n    };\n    PieceFactory.prototype.createDarkQueen = function () {\n        return new _queen__WEBPACK_IMPORTED_MODULE_3__[\"default\"](false);\n    };\n    PieceFactory.prototype.createLightQueen = function () {\n        return new _queen__WEBPACK_IMPORTED_MODULE_3__[\"default\"](true);\n    };\n    PieceFactory.prototype.createDarkKing = function () {\n        return new _king__WEBPACK_IMPORTED_MODULE_1__[\"default\"](false);\n    };\n    PieceFactory.prototype.createLightKing = function () {\n        return new _king__WEBPACK_IMPORTED_MODULE_1__[\"default\"](true);\n    };\n    PieceFactory.prototype.createDarkPawn = function () {\n        return new _pawn__WEBPACK_IMPORTED_MODULE_0__[\"default\"](false);\n    };\n    PieceFactory.prototype.createLightPawn = function () {\n        return new _pawn__WEBPACK_IMPORTED_MODULE_0__[\"default\"](true);\n    };\n    return PieceFactory;\n}());\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PieceFactory);\n\n\n//# sourceURL=webpack://chessboard/./src/core/PieceFactory.ts?");

/***/ }),

/***/ "./src/core/bishop.ts":
/*!****************************!*\
  !*** ./src/core/bishop.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _piece__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./piece */ \"./src/core/piece.ts\");\n/* harmony import */ var _pieces__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pieces */ \"./src/core/pieces.ts\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\nvar Bishop = /** @class */ (function (_super) {\n    __extends(Bishop, _super);\n    function Bishop(isWhite) {\n        var _this = _super.call(this, isWhite) || this;\n        _this.className = (isWhite) ? _pieces__WEBPACK_IMPORTED_MODULE_1__[\"default\"].L_BISHOP : _pieces__WEBPACK_IMPORTED_MODULE_1__[\"default\"].D_BISHOP;\n        return _this;\n    }\n    Bishop.prototype.copy = function () {\n        var newBishop = new Bishop(this.isWhite);\n        this.copyBase(newBishop);\n        return newBishop;\n    };\n    Bishop.prototype.getAttackedSquares = function () {\n        var protectedSquares = this.getProtectedSquares();\n        var squares = this.removeSquaresWithSameColorPieces(protectedSquares);\n        return squares;\n    };\n    Bishop.prototype.getProtectedSquares = function () {\n        var chessboard = this.chessboard;\n        var icol = this.col + 1;\n        var irow = this.row + 1;\n        var mrow = chessboard.getMaxCol();\n        var mcol = chessboard.getMaxRow();\n        var limit = false;\n        var squares = [];\n        while (icol <= mcol && irow <= mrow && limit == false) {\n            limit = this.addSquare(irow, icol, chessboard, squares);\n            irow++;\n            icol++;\n        }\n        limit = false;\n        icol = this.col - 1;\n        irow = this.row + 1;\n        while (icol >= 0 && irow <= mrow && limit == false) {\n            limit = this.addSquare(irow, icol, chessboard, squares);\n            icol--;\n            irow++;\n        }\n        limit = false;\n        icol = this.col - 1;\n        irow = this.row - 1;\n        while (icol >= 0 && irow >= 0 && limit == false) {\n            limit = this.addSquare(irow, icol, chessboard, squares);\n            icol--;\n            irow--;\n        }\n        limit = false;\n        icol = this.col + 1;\n        irow = this.row - 1;\n        while (icol <= mcol && irow >= 0 && limit == false) {\n            limit = this.addSquare(irow, icol, chessboard, squares);\n            icol++;\n            irow--;\n        }\n        return squares;\n    };\n    Bishop.prototype.getPossibleMoves = function () {\n        return this.getAttackedSquares();\n    };\n    Bishop.prototype.getAttackedSquaresLine = function (targetCol, targetRow) {\n        //This function returns all the squares attacked that are aligned with the target square (they are in the same bishop diagonal) \n        var line = [];\n        var moves = this.getPossibleMoves();\n        for (var i = 0; i < moves.length; i++) {\n            var difrows = Math.abs(moves[i].row - targetRow);\n            var difcols = Math.abs(moves[i].col - targetCol);\n            if (difrows == difcols) //if number of cols and rows are the same, it means they are in the same diagonal\n                line.push(moves[i]);\n        }\n        return line;\n    };\n    Bishop.prototype.addSquare = function (row, col, chessboard, squares) {\n        var limit = false;\n        var square = chessboard.getSquare(row, col);\n        if (square.piece) {\n            limit = true;\n            //if (square.piece.isWhite != this.isWhite)\n            squares.push(square);\n        }\n        else {\n            squares.push(square);\n        }\n        return limit;\n    };\n    //should return true if the square is attacked by the piece, even if there are other pieces in the middle\n    Bishop.prototype.isSquareOnXRay = function (row, col) {\n        var diffy = Math.abs(this.row - row);\n        var diffx = Math.abs(this.col - col);\n        var isBishopSquare = diffy === diffx;\n        return isBishopSquare;\n    };\n    return Bishop;\n}(_piece__WEBPACK_IMPORTED_MODULE_0__[\"default\"]));\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Bishop);\n\n\n//# sourceURL=webpack://chessboard/./src/core/bishop.ts?");

/***/ }),

/***/ "./src/core/board.ts":
/*!***************************!*\
  !*** ./src/core/board.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _king__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./king */ \"./src/core/king.ts\");\n/* harmony import */ var _rook__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rook */ \"./src/core/rook.ts\");\n/* harmony import */ var _dataSquare__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dataSquare */ \"./src/core/dataSquare.ts\");\n/* harmony import */ var _square__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./square */ \"./src/core/square.ts\");\n/* harmony import */ var _pieceMove__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pieceMove */ \"./src/core/pieceMove.ts\");\n\n\n\n\n\nvar ChessBoard = /** @class */ (function () {\n    function ChessBoard() {\n        this.squares = [];\n        this.MAX_COL = 7;\n        this.MAX_ROW = 7;\n        this.isWhiteTurn = true;\n        this.squares = [];\n        this.onAfterMove = null;\n        this._init();\n    }\n    ChessBoard.prototype._init = function () {\n        this._createBoard();\n    };\n    ;\n    ChessBoard.prototype._createBoard = function () {\n        this.squares = [];\n        for (var i = 0; i < 8; i++) {\n            var row = [];\n            this.squares.push(row);\n            for (var j = 0; j < 8; j++) {\n                row.push(new _square__WEBPACK_IMPORTED_MODULE_3__[\"default\"]());\n            }\n        }\n    };\n    ;\n    ChessBoard.prototype.clear = function () {\n        this.squares = [];\n        this._createBoard();\n    };\n    ChessBoard.prototype.setBlackTurn = function () {\n        this.isWhiteTurn = false;\n    };\n    ChessBoard.prototype.setWhiteTurn = function () {\n        this.isWhiteTurn = true;\n    };\n    ChessBoard.prototype.copy = function () {\n        var newBoard = new ChessBoard();\n        newBoard.isWhiteTurn = this.isWhiteTurn;\n        newBoard.onAfterMove = this.onAfterMove;\n        for (var i = 0; i < 8; i++) {\n            for (var j = 0; j < 8; j++) {\n                var newSquare = this.squares[i][j].copy();\n                newBoard.squares[i][j] = newSquare;\n                if (newSquare.piece) {\n                    newSquare.piece.chessboard = newBoard;\n                }\n            }\n        }\n        return newBoard;\n    };\n    ChessBoard.prototype.addPiece = function (squareStrings, piece) {\n        var square = this.convertSquareString(squareStrings);\n        var row = square.row;\n        var col = square.col;\n        if (row > 8 || row < 0)\n            return;\n        if (col > 8 || col < 0)\n            return;\n        var square = this.getSquare(row, col); // this.squares[row][col];\n        if (piece) {\n            square.piece = piece;\n            piece.col = col;\n            piece.row = row;\n            piece.chessboard = this;\n        }\n    };\n    ;\n    ChessBoard.prototype.getPiece = function (row, col) {\n        if (typeof row == \"string\") {\n            var square = this.convertSquareString(row);\n            if (square) {\n                row = square.row;\n                col = square.col;\n            }\n        }\n        var sq = this.squares[row][col];\n        var piece = sq == undefined ? null : sq.piece;\n        return piece;\n    };\n    ;\n    ChessBoard.prototype.getSquare = function (row, col) {\n        var indexRow = 0, indexCol = 0;\n        if (typeof row == \"string\") {\n            var square = this.convertSquareString(row);\n            if (square) {\n                indexRow = square.row;\n                indexCol = square.col;\n            }\n        }\n        else {\n            indexRow = row;\n            indexCol = col;\n        }\n        if (!this.squares[indexRow])\n            return;\n        if (!this.squares[indexRow][indexCol])\n            return null;\n        var piece = this.squares[indexRow][indexCol].piece;\n        var dataSquare = new _dataSquare__WEBPACK_IMPORTED_MODULE_2__[\"default\"](indexCol, indexRow, piece);\n        return dataSquare;\n    };\n    ;\n    ChessBoard.prototype._internalMove = function (from, to) {\n        var fromSquare = from instanceof _dataSquare__WEBPACK_IMPORTED_MODULE_2__[\"default\"] ? from : this.convertSquareString(from);\n        var toSquare = to instanceof _dataSquare__WEBPACK_IMPORTED_MODULE_2__[\"default\"] ? to : this.convertSquareString(to);\n        if (fromSquare == null && toSquare != null)\n            throw \"invalid move\";\n        var square = this.squares[fromSquare.row][fromSquare.col];\n        var destSquare = this.squares[toSquare.row][toSquare.col];\n        if (square == null ||\n            square == undefined ||\n            destSquare == null ||\n            destSquare == undefined)\n            throw \"invalid square\";\n        if (square.piece == null || square.piece == undefined)\n            throw \"no piece to move\";\n        var piece = square.piece;\n        square.piece = null;\n        piece.wasMoved = true;\n        destSquare.piece = piece;\n        piece.col = toSquare.col;\n        piece.row = toSquare.row;\n    };\n    ;\n    ChessBoard.prototype.move = function (from, to) {\n        var fromSquare = from instanceof _dataSquare__WEBPACK_IMPORTED_MODULE_2__[\"default\"] ? from : this.convertSquareString(from);\n        var toSquare = to instanceof _dataSquare__WEBPACK_IMPORTED_MODULE_2__[\"default\"] ? to : this.convertSquareString(to);\n        if (fromSquare == null && toSquare != null)\n            throw \"invalid move\";\n        if (this._isCastle(fromSquare, toSquare)) {\n            //make king move\n            this._internalMove(from, to);\n            //make rook move\n            var rookCol = toSquare.col == 6 ? 7 : 0;\n            var rookDestCol = toSquare.col == 6 ? 5 : 3;\n            var rookSquare = this.getSquare(fromSquare.row, rookCol);\n            var rookDestSquare = this.getSquare(fromSquare.row, rookDestCol);\n            if (rookSquare.piece instanceof _rook__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n                this._internalMove(rookSquare, rookDestSquare);\n            }\n        }\n        else {\n            this._internalMove(from, to);\n        }\n        this.isWhiteTurn = !this.isWhiteTurn;\n        if (this.onAfterMove instanceof Function)\n            this.onAfterMove();\n    };\n    ;\n    ChessBoard.prototype.isCheck = function (isWhite) {\n        if (isWhite === undefined)\n            isWhite = this.isWhiteTurn;\n        var myPieces = this.getPieces(isWhite);\n        var enemyPieces = this.getPieces(!isWhite);\n        var myKing = this._findKing(myPieces);\n        var isCheck = this._isPieceAttackingKing(myKing, enemyPieces);\n        return isCheck;\n    };\n    ;\n    ChessBoard.prototype.isCheckMate = function () {\n        /* 0) is check\n            1) king can't scape\n            2) can't capture the atacking piece\n            3) can't place a piece between the atacking piece and the king  */\n        if (!this.isCheck(this.isWhiteTurn))\n            return false;\n        //1) king cant scape\n        var myPieces = this.getPieces(this.isWhiteTurn);\n        var king = this._findKing(myPieces);\n        var kingPossibleMoves = king.getPossibleMoves();\n        if (kingPossibleMoves.length > 0)\n            return false;\n        //2) can't capture the attacking piece\n        var enemyPieces = this.getPieces(!this.isWhiteTurn);\n        var piecesAttackingKing = [];\n        //first i get the pieces attacking the king\n        for (var i = 0; i < enemyPieces.length; i++)\n            if (enemyPieces[i].isAttackingSquare(king.row, king.col))\n                piecesAttackingKing.push(enemyPieces[i]);\n        if (piecesAttackingKing.length == 1) {\n            var attacker = piecesAttackingKing[0];\n            //i can capture only one piece in my turn\n            for (var i = 0; i < myPieces.length; i++) {\n                var piece = myPieces[i];\n                if (piece.isAttackingSquare(attacker.row, attacker.col)) {\n                    var from = this.convertPositionToString(piece.col, piece.row);\n                    var to = this.convertPositionToString(attacker.col, attacker.row);\n                    if (this.isValidMove(from, to)) //i can capture. It is not checkmate\n                        return false;\n                }\n            }\n        }\n        //3)can't place a piece between the atacking piece and the king\n        for (var i = 0; i < piecesAttackingKing.length; i++) {\n            var attackingLine = piecesAttackingKing[i].getAttackedSquaresLine(king.col, king.row);\n            for (var j = 0; j < myPieces.length; j++) {\n                var myPiece = myPieces[j];\n                if (!(myPiece instanceof _king__WEBPACK_IMPORTED_MODULE_0__[\"default\"])) //skip king\n                 {\n                    for (var k = 0; k < attackingLine.length; k++) {\n                        var lineSquare = attackingLine[k];\n                        if (myPiece.isPossibleToMoveTo(lineSquare.col, lineSquare.row)) {\n                            var from = this.convertPositionToString(myPiece.col, myPiece.row);\n                            var col = this.convertPositionToString(lineSquare.col, lineSquare.row);\n                            if (this.isValidMove(from, col))\n                                return false;\n                        }\n                    }\n                }\n            }\n        }\n        return true;\n    };\n    ;\n    /*private _getKing (isWhite: boolean) {\n      var pieces = this.getPieces(isWhite);\n      var king = null;\n  \n      this.forEachPiece((e: Piece) => {\n        if (e instanceof King) king = e;\n      });\n  \n      return king;\n    };*/\n    ChessBoard.prototype._isPieceAttackingKing = function (king, pieces) {\n        var isCheck = false;\n        for (var i = 0; i < pieces.length && !isCheck; i++) {\n            var squares = pieces[i].getAttackedSquares();\n            for (var s = 0; s < squares.length && !isCheck; s++) {\n                var square = squares[s];\n                if (square.col == king.col && square.row == king.row)\n                    isCheck = true;\n            }\n        }\n        return isCheck;\n    };\n    ;\n    ChessBoard.prototype._findKing = function (pieces) {\n        var king = null;\n        for (var i = 0; i < pieces.length; i++) {\n            if (pieces[i] instanceof _king__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n                king = pieces[i];\n                break;\n            }\n        }\n        return king;\n    };\n    ;\n    ChessBoard.prototype.getBlackPieces = function () {\n        return this.getPieces(false);\n    };\n    ;\n    ChessBoard.prototype.getWhitePieces = function () {\n        return this.getPieces(true);\n    };\n    ;\n    ChessBoard.prototype.getPieces = function (isWhite) {\n        var pieces = [];\n        this.forEachPiece(function (piece) {\n            if (piece.isWhite == isWhite) {\n                pieces.push(piece);\n            }\n        });\n        return pieces;\n    };\n    ;\n    ChessBoard.prototype._isCastle = function (fromSquare, toSquare) {\n        var squareOrig = this.squares[fromSquare.row][fromSquare.col];\n        if (squareOrig.piece == null || !(squareOrig.piece instanceof _king__WEBPACK_IMPORTED_MODULE_0__[\"default\"]))\n            return false;\n        var isFirstRank = fromSquare.row == toSquare.row && toSquare.row == 0 || toSquare.row == 7;\n        var isCastleColumn = toSquare.col == 6 || toSquare.col == 2;\n        var isKingOriginalPosition = fromSquare.col == 4;\n        return isFirstRank && isKingOriginalPosition && isCastleColumn;\n    };\n    ChessBoard.prototype.isValidMove = function (from, to) {\n        var fromSquare = null;\n        var toSquare = null;\n        if (from instanceof _dataSquare__WEBPACK_IMPORTED_MODULE_2__[\"default\"])\n            fromSquare = { col: from.col, row: from.row };\n        else\n            fromSquare = this.convertSquareString(from);\n        if (to instanceof _dataSquare__WEBPACK_IMPORTED_MODULE_2__[\"default\"])\n            toSquare = { col: to.col, row: to.row };\n        else\n            toSquare = this.convertSquareString(to);\n        if (fromSquare == null)\n            return false;\n        var pieceOrig = this.squares[fromSquare.row][fromSquare.col];\n        var pieceDest = this.squares[toSquare.row][toSquare.col];\n        if (pieceOrig == null)\n            return false;\n        if (pieceOrig.piece == null)\n            return false;\n        //we cant move if is not our turn\n        if (pieceOrig.piece != null && pieceOrig.piece.isWhite != this.isWhiteTurn)\n            return false;\n        //we cant take a piece of the same colour\n        if (pieceDest.piece != null &&\n            pieceDest.piece.isWhite == pieceOrig.piece.isWhite)\n            return false;\n        var pieceMovedColor = pieceOrig.piece.isWhite;\n        var dataOrig = new _dataSquare__WEBPACK_IMPORTED_MODULE_2__[\"default\"](fromSquare.col, fromSquare.row, pieceOrig ? pieceOrig.piece : null);\n        var dataDest = new _dataSquare__WEBPACK_IMPORTED_MODULE_2__[\"default\"](toSquare.col, toSquare.row, pieceDest ? pieceDest.piece : null);\n        var validMove = pieceOrig.piece.isValidMove(dataOrig, dataDest);\n        if (validMove) {\n            var backupPiece = pieceDest.piece;\n            this._internalMove(from, to);\n            if (this.isCheck(pieceMovedColor)) {\n                //cant move because is check\n                validMove = false;\n            }\n            this._internalMove(to, from); //restore movement\n            //this is to recover the piece, if there was any in the \"to\" square\n            if (backupPiece != null)\n                this.squares[toSquare.row][toSquare.col].piece = backupPiece;\n        }\n        return validMove;\n    };\n    ;\n    ChessBoard.prototype.forEachPiece = function (callback) {\n        if (!(callback instanceof Function))\n            return;\n        for (var i = 0; i < 8; i++) {\n            for (var j = 0; j < 8; j++) {\n                var square = this.getSquare(i, j);\n                var piece = square.piece;\n                if (piece != null)\n                    callback(piece);\n            }\n        }\n    };\n    ;\n    ChessBoard.prototype.getSquaresProtectedBy = function (protectedByWhite) {\n        protectedByWhite = protectedByWhite === undefined ? true : protectedByWhite;\n        var squares = [];\n        this.forEachPiece(function (piece) {\n            if (piece.isWhite == protectedByWhite) {\n                var sqs = piece.getProtectedSquares();\n                sqs.forEach(function (e) {\n                    squares.push(e);\n                });\n            }\n        });\n        return squares;\n    };\n    ChessBoard.prototype.getSquaresAttackedBy = function (attackedByWhite) {\n        attackedByWhite = attackedByWhite === undefined ? true : attackedByWhite;\n        var squares = [];\n        this.forEachPiece(function (piece) {\n            if (piece.isWhite == attackedByWhite) {\n                var sqs = piece.getAttackedSquares();\n                sqs.forEach(function (e) {\n                    squares.push(e);\n                });\n            }\n        });\n        return squares;\n    };\n    ;\n    ChessBoard.prototype.getMoves = function () {\n        return this._getValidMoves();\n    };\n    ChessBoard.prototype._getValidMoves = function () {\n        var _this = this;\n        var moves = this._getMoves();\n        var validMoves = [];\n        moves.forEach(function (e) {\n            if (_this.isValidMove(e.squareFrom, e.squareTo))\n                validMoves.push(e);\n        });\n        return validMoves;\n    };\n    ChessBoard.prototype._getMoves = function () {\n        var pieces = this.getPieces(this.isWhiteTurn);\n        var listOfMoves = [];\n        for (var i = 0; i < pieces.length; i++) {\n            var piece = pieces[i];\n            var moves = piece.getPossibleMoves();\n            for (var j = 0; j < moves.length; j++) {\n                var squareFrom = new _dataSquare__WEBPACK_IMPORTED_MODULE_2__[\"default\"](piece.col, piece.row);\n                var squareTo = moves[j];\n                listOfMoves.push(new _pieceMove__WEBPACK_IMPORTED_MODULE_4__[\"default\"](squareFrom, squareTo));\n            }\n        }\n        return listOfMoves;\n    };\n    ChessBoard.prototype.convertPositionToString = function (col, row) {\n        var cols = {\n            0: \"a\",\n            1: \"b\",\n            2: \"c\",\n            3: \"d\",\n            4: \"e\",\n            5: \"f\",\n            6: \"g\",\n            7: \"h\",\n        };\n        var rows = {\n            7: \"8\",\n            6: \"7\",\n            5: \"6\",\n            4: \"5\",\n            3: \"4\",\n            2: \"3\",\n            1: \"2\",\n            0: \"1\",\n        };\n        var res = null;\n        if (cols[col] != undefined && rows[row] != undefined) {\n            res = cols[col] + rows[row];\n        }\n        return res;\n    };\n    ;\n    ChessBoard.prototype.getMaxCol = function () {\n        return this.MAX_COL;\n    };\n    ;\n    ChessBoard.prototype.getMaxRow = function () {\n        return this.MAX_ROW;\n    };\n    ;\n    ChessBoard.prototype.convertSquareString = function (square) {\n        var cols = {\n            a: 0,\n            b: 1,\n            c: 2,\n            d: 3,\n            e: 4,\n            f: 5,\n            g: 6,\n            h: 7,\n        };\n        var rows = {\n            8: 7,\n            7: 6,\n            6: 5,\n            5: 4,\n            4: 3,\n            3: 2,\n            2: 1,\n            1: 0,\n        };\n        if (square.length != 2)\n            return null;\n        var col = cols[square.charAt(0)];\n        var row = rows[square.charAt(1)];\n        if (col == undefined || row == undefined)\n            return null;\n        return this.getSquare(row, col);\n        //return { col: col, row: row };\n    };\n    ;\n    return ChessBoard;\n}());\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ChessBoard);\n\n\n//# sourceURL=webpack://chessboard/./src/core/board.ts?");

/***/ }),

/***/ "./src/core/computer.ts":
/*!******************************!*\
  !*** ./src/core/computer.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CheckMate: () => (/* binding */ CheckMate),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _dataSquare__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dataSquare */ \"./src/core/dataSquare.ts\");\n/* harmony import */ var _pieceMove__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pieceMove */ \"./src/core/pieceMove.ts\");\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n\n\nvar Computer = /** @class */ (function () {\n    function Computer(chessboard) {\n        this.isWhite = false;\n        this.chessboard = chessboard;\n    }\n    Computer.prototype.move = function () {\n        if (!this._isMyTurn())\n            return;\n        var moves = this._getValidMoves();\n        if (moves.length == 0)\n            return;\n        var index = Math.floor(Math.random() * moves.length);\n        //var index = moves.length - 1;\n        var move = moves[index];\n        this.chessboard.move(move.squareFrom, move.squareTo);\n    };\n    /*public findCheckMate()\n    {\n        var finder = new CheckMate();\n        var moves = finder.find(this.chessboard);\n        return moves;\n    }*/\n    Computer.prototype._getValidMoves = function () {\n        var _this = this;\n        var moves = this._getMoves();\n        var validMoves = [];\n        moves.forEach(function (e) {\n            if (_this.chessboard.isValidMove(e.squareFrom, e.squareTo))\n                validMoves.push(e);\n        });\n        return validMoves;\n    };\n    Computer.prototype._getMoves = function () {\n        var pieces = this.chessboard.getPieces(this.isWhite);\n        var listOfMoves = [];\n        for (var i = 0; i < pieces.length; i++) {\n            var piece = pieces[i];\n            var moves = piece.getPossibleMoves();\n            for (var j = 0; j < moves.length; j++) {\n                var squareFrom = new _dataSquare__WEBPACK_IMPORTED_MODULE_0__[\"default\"](piece.col, piece.row);\n                var squareTo = moves[j];\n                listOfMoves.push(new _pieceMove__WEBPACK_IMPORTED_MODULE_1__[\"default\"](squareFrom, squareTo));\n            }\n        }\n        return listOfMoves;\n    };\n    Computer.prototype._isMyTurn = function () {\n        return this.isWhite == this.chessboard.isWhiteTurn;\n    };\n    return Computer;\n}());\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Computer);\n/* class CheckMate\n{\n    find(chessboard)\n    {\n        var moves = [];\n        moves = this._find(chessboard, moves);\n        return moves;\n    }\n\n    _find(chessboard, moves)\n    {\n        if(chessboard.isCheckMate())\n            return moves;\n        \n        var solutionMoves = null;\n\n        for(var i = 0; i < moves.length; i++)\n        {\n            var move = moves[i];\n            var newMoves = [...moves, move];\n            var boardCopy = chessboard.copy();\n\n            boardCopy.move(move.squareFrom, move.squareTo);\n            newMoves = this._find(boardCopy, newMoves);\n\n            if(newMoves != null)//its checkmate using the new move\n            {\n                if(solutionMoves == null)\n                    solutionMoves = newMoves;\n                else if(newMoves.length < solutionMoves.length)//keep the solution with less moves\n                    solutionMoves = newMoves;\n            }\n\n            boardCopy = null;\n        }\n\n        return solutionMoves;\n    }\n} */\nvar CheckMate = /** @class */ (function () {\n    function CheckMate() {\n        this.MAX_DEPTH = 10;\n    }\n    CheckMate.prototype.search = function (chessboard, depth, current_moves) {\n        if (depth === undefined)\n            depth = 1;\n        if (current_moves === undefined)\n            current_moves = [];\n        if (chessboard.isCheckMate())\n            return current_moves;\n        if (depth == this.MAX_DEPTH)\n            return null; //not found\n        var moves = chessboard.getMoves();\n        for (var i = 0; i < moves.length; i++) {\n            var move = moves[i];\n            var copy = chessboard.copy();\n            copy.move(move.squareFrom, move.squareTo);\n            var variation_moves = __spreadArray(__spreadArray([], current_moves, true), [move], false);\n            var solution = this.search(copy, depth + 1, variation_moves);\n            if (solution != null) {\n                return solution;\n            }\n        }\n        return null;\n    };\n    return CheckMate;\n}());\n\n/*\nfunction PieceMove(squareFrom, squareTo)\n{\n    this.squareFrom = squareFrom;\n    this.squareTo = squareTo;\n}*/\n\n\n//# sourceURL=webpack://chessboard/./src/core/computer.ts?");

/***/ }),

/***/ "./src/core/dataSquare.ts":
/*!********************************!*\
  !*** ./src/core/dataSquare.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar DataSquare = /** @class */ (function () {\n    function DataSquare(col, row, piece) {\n        this.col = col;\n        this.row = row;\n        this.piece = piece;\n    }\n    DataSquare.prototype.isEqual = function (square) {\n        if (!(square instanceof DataSquare))\n            return false;\n        return square.col == this.col && square.row == this.row;\n    };\n    ;\n    return DataSquare;\n}());\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DataSquare);\n\n\n//# sourceURL=webpack://chessboard/./src/core/dataSquare.ts?");

/***/ }),

/***/ "./src/core/king.ts":
/*!**************************!*\
  !*** ./src/core/king.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _piece__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./piece */ \"./src/core/piece.ts\");\n/* harmony import */ var _pieces__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pieces */ \"./src/core/pieces.ts\");\n/* harmony import */ var _rook__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rook */ \"./src/core/rook.ts\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\nvar King = /** @class */ (function (_super) {\n    __extends(King, _super);\n    function King(isWhite) {\n        var _this = _super.call(this, isWhite) || this;\n        _this.className = (isWhite) ? _pieces__WEBPACK_IMPORTED_MODULE_1__[\"default\"].L_KING : _pieces__WEBPACK_IMPORTED_MODULE_1__[\"default\"].D_KING;\n        return _this;\n    }\n    King.prototype.copy = function () {\n        var newPiece = new King(this.isWhite);\n        this.copyBase(newPiece);\n        return newPiece;\n    };\n    King.prototype.getAttackedSquares = function () {\n        var protectedSquares = this.getProtectedSquares();\n        var squares = this.removeSquaresWithSameColorPieces(protectedSquares);\n        return squares;\n    };\n    King.prototype.getProtectedSquares = function () {\n        var chessboard = this.chessboard;\n        var attacked = [];\n        attacked.push(chessboard.getSquare(this.row, this.col + 1));\n        attacked.push(chessboard.getSquare(this.row, this.col - 1));\n        attacked.push(chessboard.getSquare(this.row + 1, this.col));\n        attacked.push(chessboard.getSquare(this.row + 1, this.col + 1));\n        attacked.push(chessboard.getSquare(this.row + 1, this.col - 1));\n        attacked.push(chessboard.getSquare(this.row - 1, this.col));\n        attacked.push(chessboard.getSquare(this.row - 1, this.col + 1));\n        attacked.push(chessboard.getSquare(this.row - 1, this.col - 1));\n        var filtered = [];\n        attacked.forEach(function (e) {\n            if (e != null && e != undefined)\n                filtered.push(e);\n        });\n        return filtered;\n    };\n    King.prototype.getPossibleMoves = function () {\n        var _this = this;\n        var chessboard = this.chessboard;\n        var attacked = this.getAttackedSquares();\n        var filtered = [];\n        var protectedByEnemy = chessboard.getSquaresProtectedBy(!this.isWhite);\n        attacked.forEach(function (e) {\n            var sameColorPiece = (e.piece && e.piece.isWhite == _this.isWhite);\n            if (e != null && !sameColorPiece) {\n                var isSquareAttacked = false;\n                for (var i = 0; i < protectedByEnemy.length && isSquareAttacked == false; i++) {\n                    var squaredAttacked = protectedByEnemy[i];\n                    if (e.isEqual(squaredAttacked))\n                        isSquareAttacked = true;\n                }\n                if (!isSquareAttacked)\n                    filtered.push(e);\n            }\n        });\n        //remove moves if the target square is on X ray with some piece\n        filtered = this._removeMovesIfSquareIsOnXRay(filtered);\n        var isCheck = this.chessboard.isCheck(this.isWhite);\n        if (!isCheck) //i cant castle in check\n         {\n            //add clastle\n            if (this.canShortCastle())\n                filtered.push(this.chessboard.getSquare(this.row, this.col + 2));\n            if (this.canLongCastle())\n                filtered.push(this.chessboard.getSquare(this.row, this.col - 2));\n        }\n        return filtered;\n    };\n    King.prototype.canShortCastle = function () {\n        // () Neither the king nor the chosen rook has previously moved.\n        // () There are no pieces between the king and the chosen rook.\n        // () The king is not currently in check.\n        // () The king does not pass through a square that is attacked by an enemy piece.\n        // () The king does not end up in check. (True of any legal move.)\n        if (this._wereKingOrRookMoved())\n            return false;\n        if (!this._isShortCastlePathFree())\n            return false;\n        var squaresKingGoesThrough = [];\n        squaresKingGoesThrough.push(this.chessboard.getSquare(this.row, this.col + 1));\n        squaresKingGoesThrough.push(this.chessboard.getSquare(this.row, this.col + 2));\n        if (this._areSquaresProtectedByEnemy(squaresKingGoesThrough))\n            return false;\n        return true;\n    };\n    King.prototype.canLongCastle = function () {\n        // () Neither the king nor the chosen rook has previously moved.\n        // () There are no pieces between the king and the chosen rook.\n        // () The king is not currently in check.\n        // () The king does not pass through a square that is attacked by an enemy piece.\n        // () The king does not end up in check. (True of any legal move.)\n        if (this._wereKingOrRookMoved())\n            return false;\n        if (!this._isLongCastlePathFree())\n            return false;\n        var squaresKingGoesThrough = [];\n        squaresKingGoesThrough.push(this.chessboard.getSquare(this.row, this.col - 1));\n        squaresKingGoesThrough.push(this.chessboard.getSquare(this.row, this.col - 2));\n        if (this._areSquaresProtectedByEnemy(squaresKingGoesThrough))\n            return false;\n        return true;\n    };\n    King.prototype._areSquaresProtectedByEnemy = function (listSquares) {\n        var protectedByEnemy = this.chessboard.getSquaresProtectedBy(!this.isWhite);\n        for (var i = 0; i < protectedByEnemy.length; i++) {\n            var protectedSquare = protectedByEnemy[i];\n            for (var j = 0; j < listSquares.length; j++) {\n                var square = listSquares[j];\n                if (protectedSquare.row == square.row && protectedSquare.col == square.col)\n                    return true;\n            }\n        }\n        return false;\n    };\n    King.prototype._isShortCastlePathFree = function () {\n        var piece1 = this.chessboard.getPiece(this.row, this.col + 1);\n        var piece2 = this.chessboard.getPiece(this.row, this.col + 2);\n        //if there are no pieces in the right squares\n        return piece1 == null && piece2 == null;\n    };\n    King.prototype._isLongCastlePathFree = function () {\n        var p1 = this.chessboard.getPiece(this.row, this.col - 1);\n        var p2 = this.chessboard.getPiece(this.row, this.col - 2);\n        var p3 = this.chessboard.getPiece(this.row, this.col - 3);\n        //if there are no pieces in the left squares\n        return p1 == null && p2 == null && p3 == null;\n    };\n    King.prototype._wereKingOrRookMoved = function () {\n        //check rook and king were not moved\n        if (this.wasMoved)\n            return true;\n        var rook = this._getRook();\n        if (rook == null) //this means it was captured or does not exists, i can't castle\n            return true;\n        if (rook.wasMoved)\n            return true;\n        var originalPosition = this._getOriginalPosition();\n        if (originalPosition.row !== this.row || originalPosition.col !== this.col)\n            return true;\n        return false;\n    };\n    King.prototype._getRook = function () {\n        var pieces = this.chessboard.getPieces(this.isWhite);\n        var rook = null;\n        for (var i = 0; i < pieces.length; i++)\n            if (pieces[i] instanceof _rook__WEBPACK_IMPORTED_MODULE_2__[\"default\"])\n                rook = pieces[i];\n        return rook;\n    };\n    King.prototype._removeMovesIfSquareIsOnXRay = function (moves) {\n        var filtered = [];\n        var enemyPieces = this.chessboard.getPieces(!this.isWhite);\n        for (var j = 0; j < moves.length; j++) {\n            var move = moves[j];\n            var isOnXRay = false;\n            for (var i = 0; i < enemyPieces.length && isOnXRay === false; i++) {\n                var piece = enemyPieces[i];\n                if (piece.isSquareOnXRay(move.row, move.col)\n                    && piece.isSquareOnXRay(this.row, this.col)) //i also need to check king: I should remove posible square if the king moves to that square and is check\n                    isOnXRay = true;\n            }\n            if (!isOnXRay)\n                filtered.push(move);\n        }\n        return filtered;\n    };\n    King.prototype._getOriginalPosition = function () {\n        return this.isWhite ? { col: 4, row: 0 } : { col: 4, row: 7 };\n    };\n    return King;\n}(_piece__WEBPACK_IMPORTED_MODULE_0__[\"default\"]));\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (King);\n\n\n//# sourceURL=webpack://chessboard/./src/core/king.ts?");

/***/ }),

/***/ "./src/core/knight.ts":
/*!****************************!*\
  !*** ./src/core/knight.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _piece__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./piece */ \"./src/core/piece.ts\");\n/* harmony import */ var _pieces__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pieces */ \"./src/core/pieces.ts\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\nvar Knight = /** @class */ (function (_super) {\n    __extends(Knight, _super);\n    function Knight(isWhite) {\n        var _this = _super.call(this, isWhite) || this;\n        _this.className = (isWhite) ? _pieces__WEBPACK_IMPORTED_MODULE_1__[\"default\"].L_KNIGHT : _pieces__WEBPACK_IMPORTED_MODULE_1__[\"default\"].D_KNIGHT;\n        return _this;\n    }\n    Knight.prototype.copy = function () {\n        var newPiece = new Knight(this.isWhite);\n        this.copyBase(newPiece);\n        return newPiece;\n    };\n    Knight.prototype.getAttackedSquares = function () {\n        var protectedSquares = this.getProtectedSquares();\n        var squares = this.removeSquaresWithSameColorPieces(protectedSquares);\n        return squares;\n    };\n    Knight.prototype.getProtectedSquares = function () {\n        var chessboard = this.chessboard;\n        var squares = [];\n        squares.push(chessboard.getSquare(this.row + 2, this.col - 1));\n        squares.push(chessboard.getSquare(this.row + 2, this.col + 1));\n        squares.push(chessboard.getSquare(this.row + 1, this.col + 2));\n        squares.push(chessboard.getSquare(this.row + 1, this.col - 2));\n        squares.push(chessboard.getSquare(this.row - 1, this.col + 2));\n        squares.push(chessboard.getSquare(this.row - 1, this.col - 2));\n        squares.push(chessboard.getSquare(this.row - 2, this.col + 1));\n        squares.push(chessboard.getSquare(this.row - 2, this.col - 1));\n        var filtered = [];\n        squares.forEach(function (e) {\n            if (e) {\n                if (e.piece) {\n                    //if (e.piece.isWhite != this.isWhite)\n                    filtered.push(e);\n                }\n                else {\n                    filtered.push(e);\n                }\n            }\n        });\n        return filtered;\n    };\n    Knight.prototype.getPossibleMoves = function () {\n        return this.getAttackedSquares();\n    };\n    return Knight;\n}(_piece__WEBPACK_IMPORTED_MODULE_0__[\"default\"]));\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Knight);\n\n\n//# sourceURL=webpack://chessboard/./src/core/knight.ts?");

/***/ }),

/***/ "./src/core/pawn.ts":
/*!**************************!*\
  !*** ./src/core/pawn.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _piece__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./piece */ \"./src/core/piece.ts\");\n/* harmony import */ var _pieces__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pieces */ \"./src/core/pieces.ts\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\nvar Pawn = /** @class */ (function (_super) {\n    __extends(Pawn, _super);\n    function Pawn(isWhite) {\n        var _this = _super.call(this, isWhite) || this;\n        _this.direction = (isWhite) ? 1 : -1;\n        _this.className = (isWhite) ? _pieces__WEBPACK_IMPORTED_MODULE_1__[\"default\"].L_PAWN : _pieces__WEBPACK_IMPORTED_MODULE_1__[\"default\"].D_PAWN;\n        return _this;\n    }\n    Pawn.prototype.copy = function () {\n        var newPiece = new Pawn(this.isWhite);\n        this.copyBase(newPiece);\n        return newPiece;\n    };\n    Pawn.prototype.getAttackedSquares = function () {\n        var protectedSquares = this.getProtectedSquares();\n        var squares = this.removeSquaresWithSameColorPieces(protectedSquares);\n        return squares;\n    };\n    Pawn.prototype.getProtectedSquares = function () {\n        var chessboard = this.chessboard;\n        var squares = [];\n        if (this.col != undefined && this.row != undefined) {\n            squares.push(chessboard.getSquare(this.row + this.direction * 1, this.col + 1));\n            squares.push(chessboard.getSquare(this.row + this.direction * 1, this.col - 1));\n        }\n        var filtered = [];\n        squares.forEach(function (e) {\n            if (e)\n                filtered.push(e);\n        });\n        return filtered;\n    };\n    Pawn.prototype.getPossibleMoves = function () {\n        var _this = this;\n        var chessboard = this.chessboard;\n        var attacked = this.getAttackedSquares();\n        var possible = [];\n        //attacked squares are possible if there is a different color piece\n        attacked.forEach(function (e) {\n            if (e.piece != null && e.piece.isWhite != _this.isWhite)\n                possible.push(e);\n        });\n        var nextSquare2 = chessboard.getSquare(this.row + (this.direction * 2), this.col);\n        var nextSquare = chessboard.getSquare(this.row + (this.direction * 1), this.col);\n        if (nextSquare.piece == null) {\n            possible.push(nextSquare);\n            if (!this.wasMoved && nextSquare2 != null && nextSquare2.piece == null) {\n                possible.push(nextSquare2);\n            }\n        }\n        return possible;\n    };\n    Pawn.prototype.isValidMove = function (dataSquareOrig, dataSquareDest) {\n        if (this.canMoveForward(dataSquareOrig, dataSquareDest))\n            return true;\n        if (this.canMoveDiagonal(dataSquareOrig, dataSquareDest))\n            return true;\n        return false;\n    };\n    Pawn.prototype.canMoveForward = function (dataSquareOrig, dataSquareDest) {\n        /*\n            pawn can move forward one square and two squares in the first movement\n            only if destiny is a free square\n           */\n        if (dataSquareOrig.col == dataSquareDest.col) {\n            var increment = this.direction * 1;\n            var origRow = dataSquareOrig.row;\n            var destRow = dataSquareDest.row;\n            if (origRow + increment == destRow && dataSquareDest.piece == null)\n                return true;\n            if (!this.wasMoved && origRow + (2 * increment) == destRow && dataSquareDest.piece == null)\n                return true;\n        }\n        return false;\n    };\n    Pawn.prototype.canMoveDiagonal = function (squareOrig, squareDest) {\n        var dir = this.direction * 1;\n        var isRighDiagonal = squareOrig.col == squareDest.col + 1 && squareOrig.row + dir == squareDest.row;\n        var canCapture = squareDest.piece != null && squareDest.piece.isWhite != this.isWhite;\n        if (isRighDiagonal && canCapture)\n            return true;\n        var isLeftDiagonal = squareOrig.col == squareDest.col - 1 && squareOrig.row + dir == squareDest.row;\n        if (isLeftDiagonal && canCapture)\n            return true;\n        return false;\n    };\n    return Pawn;\n}(_piece__WEBPACK_IMPORTED_MODULE_0__[\"default\"]));\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Pawn);\n\n\n//# sourceURL=webpack://chessboard/./src/core/pawn.ts?");

/***/ }),

/***/ "./src/core/piece.ts":
/*!***************************!*\
  !*** ./src/core/piece.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar Piece = /** @class */ (function () {\n    function Piece(isWhite) {\n        this.className;\n        this.isWhite = isWhite;\n        this.chessboard = null;\n        this.wasMoved = false;\n        this.row = undefined;\n        this.col = undefined;\n    }\n    Piece.prototype.copyBase = function (piece) {\n        piece.className = this.className;\n        piece.isWhite = this.isWhite;\n        piece.chessboard = this.chessboard;\n        piece.wasMoved = this.wasMoved;\n        piece.row = this.row;\n        piece.col = this.col;\n    };\n    Piece.prototype.isValidMove = function (origSquare, destSquare) {\n        var moves = this.getPossibleMoves();\n        var found = false;\n        var destRow = destSquare.row;\n        var destCol = destSquare.col;\n        for (var i = 0; i < moves.length && !found; i++) {\n            var move = moves[i];\n            if (move.row == destRow && move.col == destCol)\n                found = true;\n        }\n        return found;\n    };\n    Piece.prototype.isAttackingSquare = function (row, col) {\n        var squares = this.getAttackedSquares();\n        for (var i = 0; i < squares.length; i++)\n            if (squares[i].col == col && squares[i].row == row)\n                return true;\n        return false;\n    };\n    Piece.prototype.getAttackedSquares = function () {\n        return [];\n    };\n    Piece.prototype.getPossibleMoves = function () {\n        return [];\n    };\n    Piece.prototype.isPossibleToMoveTo = function (col, row) {\n        var moves = this.getPossibleMoves();\n        for (var i = 0; i < moves.length; i++)\n            if (moves[i].col == col && moves[i].row == row)\n                return true;\n        return false;\n    };\n    Piece.prototype.getAttackedSquaresLine = function (targetCol, targetRow) {\n        return [];\n    };\n    Piece.prototype.removeSquaresWithSameColorPieces = function (squares) {\n        var filterSquaresWithPiecesSameColor = [];\n        for (var i = 0; i < squares.length; i++) {\n            var square = squares[i];\n            if (square.piece) {\n                if (square.piece.isWhite != this.isWhite) {\n                    filterSquaresWithPiecesSameColor.push(square);\n                }\n            }\n            else {\n                filterSquaresWithPiecesSameColor.push(square);\n            }\n        }\n        return filterSquaresWithPiecesSameColor;\n    };\n    Piece.prototype.getProtectedSquares = function () {\n        return [];\n    };\n    //should return true if the square is attacked by the piece, even if there are other pieces in the middle\n    Piece.prototype.isSquareOnXRay = function (row, col) {\n        return false;\n    };\n    Piece.prototype.copy = function () {\n        return null;\n    };\n    return Piece;\n}());\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Piece);\n\n\n//# sourceURL=webpack://chessboard/./src/core/piece.ts?");

/***/ }),

/***/ "./src/core/pieceMove.ts":
/*!*******************************!*\
  !*** ./src/core/pieceMove.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar PieceMove = /** @class */ (function () {\n    function PieceMove(squareFrom, squareTo) {\n        this.squareFrom = squareFrom;\n        this.squareTo = squareTo;\n    }\n    return PieceMove;\n}());\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PieceMove);\n\n\n//# sourceURL=webpack://chessboard/./src/core/pieceMove.ts?");

/***/ }),

/***/ "./src/core/pieces.ts":
/*!****************************!*\
  !*** ./src/core/pieces.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar PIECES = {\n    D_BISHOP: \"piece-darkbishop\",\n    L_BISHOP: \"piece-lightbishop\",\n    D_QUEEN: \"piece-darkqueen\",\n    L_QUEEN: \"piece-lightqueen\",\n    D_KNIGHT: \"piece-darkknight\",\n    L_KNIGHT: \"piece-lightknight\",\n    D_KING: \"piece-darkking\",\n    L_KING: \"piece-lightking\",\n    D_PAWN: \"piece-darkpawn\",\n    L_PAWN: \"piece-lightpawn\",\n    D_ROOK: \"piece-darkrook\",\n    L_ROOK: \"piece-lightrook\"\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PIECES);\n\n\n//# sourceURL=webpack://chessboard/./src/core/pieces.ts?");

/***/ }),

/***/ "./src/core/position.ts":
/*!******************************!*\
  !*** ./src/core/position.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _PieceFactory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PieceFactory */ \"./src/core/PieceFactory.ts\");\n\nvar Position = /** @class */ (function () {\n    function Position() {\n    }\n    Position.prototype.setupDefault = function (chessboard) {\n        var factory = new _PieceFactory__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n        var convertCol = { 0: 'a', 1: 'b', 2: 'c', 3: 'd', 4: 'e', 5: 'f', 6: 'g', 7: 'h' };\n        for (var i = 0; i < 8; i++) {\n            var row = 7;\n            var square = convertCol[i] + \"\" + 7;\n            var pwn = factory.createDarkPawn();\n            chessboard.addPiece(square, pwn);\n        }\n        chessboard.addPiece(\"a8\", factory.createDarkRook());\n        chessboard.addPiece(\"b8\", factory.createDarkKight());\n        chessboard.addPiece(\"c8\", factory.createDarkBishop());\n        chessboard.addPiece(\"d8\", factory.createDarkQueen());\n        chessboard.addPiece(\"e8\", factory.createDarkKing());\n        chessboard.addPiece(\"f8\", factory.createDarkBishop());\n        chessboard.addPiece(\"g8\", factory.createDarkKight());\n        chessboard.addPiece(\"h8\", factory.createDarkRook());\n        for (var i = 0; i < 8; i++) {\n            var row = 2;\n            var square = convertCol[i] + \"\" + 2;\n            var pwn = factory.createLightPawn();\n            chessboard.addPiece(square, pwn);\n        }\n        chessboard.addPiece(\"a1\", factory.createLightRook());\n        chessboard.addPiece(\"b1\", factory.createLightKight());\n        chessboard.addPiece(\"c1\", factory.createLightBishop());\n        chessboard.addPiece(\"d1\", factory.createLightQueen());\n        chessboard.addPiece(\"e1\", factory.createLightKing());\n        chessboard.addPiece(\"f1\", factory.createLightBishop());\n        chessboard.addPiece(\"g1\", factory.createLightKight());\n        chessboard.addPiece(\"h1\", factory.createLightRook());\n    };\n    Position.prototype.setupFromFen = function (fenString, chessboard) {\n        chessboard.clear();\n        var fenSplit = fenString.split(\" \");\n        var position = fenSplit[0];\n        var turn = fenSplit.length > 1 ? fenSplit[1] : undefined;\n        var ranks = position.split(\"/\");\n        var convertCol = { 0: 'a', 1: 'b', 2: 'c', 3: 'd', 4: 'e', 5: 'f', 6: 'g', 7: 'h' };\n        for (var indexRank = 0; indexRank < ranks.length; indexRank++) {\n            var rank = ranks[7 - indexRank]; //fen starts with the last rank\n            var col = 0;\n            for (var j = 0; j < rank.length && col < 8; j++) {\n                var char = rank[j];\n                var num = parseInt(char);\n                var isNumber = !isNaN(num);\n                if (isNumber) {\n                    col += num;\n                }\n                else {\n                    var piece = this._CreatePieceFromLetter(char);\n                    var position_1 = convertCol[col] + \"\" + (indexRank + 1);\n                    chessboard.addPiece(position_1, piece);\n                    col++;\n                }\n            }\n        }\n        if (turn != undefined) {\n            if (turn === 'b')\n                chessboard.setBlackTurn();\n            else if (turn === 'w')\n                chessboard.setWhiteTurn();\n        }\n    };\n    Position.prototype._CreatePieceFromLetter = function (letter) {\n        var factory = new _PieceFactory__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n        if (letter == \"r\")\n            return factory.createDarkRook();\n        else if (letter == \"n\")\n            return factory.createDarkKight();\n        else if (letter == \"b\")\n            return factory.createDarkBishop();\n        else if (letter == \"q\")\n            return factory.createDarkQueen();\n        else if (letter == \"k\")\n            return factory.createDarkKing();\n        else if (letter == \"p\")\n            return factory.createDarkPawn();\n        else if (letter == \"R\")\n            return factory.createLightRook();\n        else if (letter == \"N\")\n            return factory.createLightKight();\n        else if (letter == \"B\")\n            return factory.createLightBishop();\n        else if (letter == \"Q\")\n            return factory.createLightQueen();\n        else if (letter == \"K\")\n            return factory.createLightKing();\n        else if (letter == \"P\")\n            return factory.createLightPawn();\n        throw new Error(\"unrecognize piece letter \" + letter);\n    };\n    Position.prototype._isNumeric = function (s) {\n        return !isNaN(s - parseFloat(s));\n    };\n    return Position;\n}());\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Position);\n\n\n//# sourceURL=webpack://chessboard/./src/core/position.ts?");

/***/ }),

/***/ "./src/core/queen.ts":
/*!***************************!*\
  !*** ./src/core/queen.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _king__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./king */ \"./src/core/king.ts\");\n/* harmony import */ var _piece__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./piece */ \"./src/core/piece.ts\");\n/* harmony import */ var _pieces__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pieces */ \"./src/core/pieces.ts\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\nvar Queen = /** @class */ (function (_super) {\n    __extends(Queen, _super);\n    function Queen(isWhite) {\n        var _this = _super.call(this, isWhite) || this;\n        _this.className = (isWhite) ? _pieces__WEBPACK_IMPORTED_MODULE_2__[\"default\"].L_QUEEN : _pieces__WEBPACK_IMPORTED_MODULE_2__[\"default\"].D_QUEEN;\n        return _this;\n    }\n    Queen.prototype.copy = function () {\n        var newPiece = new Queen(this.isWhite);\n        this.copyBase(newPiece);\n        return newPiece;\n    };\n    Queen.prototype.getProtectedSquares = function () {\n        var chessboard = this.chessboard;\n        var squares = [];\n        var maxRow = chessboard.getMaxRow();\n        var maxCol = chessboard.getMaxCol();\n        var limit = false;\n        for (var rowi = this.row + 1; rowi <= maxRow && limit == false; rowi++) {\n            limit = this.addSquare(rowi, this.col, chessboard, squares);\n        }\n        limit = false;\n        for (var rowi = this.row - 1; rowi >= 0 && limit == false; rowi--) {\n            limit = this.addSquare(rowi, this.col, chessboard, squares);\n        }\n        limit = false;\n        for (var coli = this.col + 1; coli <= maxCol && limit == false; coli++) {\n            limit = this.addSquare(this.row, coli, chessboard, squares);\n        }\n        limit = false;\n        for (var coli = this.col - 1; coli >= 0 && limit == false; coli--) {\n            limit = this.addSquare(this.row, coli, chessboard, squares);\n        }\n        limit = false;\n        var coli = this.col - 1, rowi = this.row - 1;\n        while (coli >= 0 && rowi >= 0 && limit == false) {\n            limit = this.addSquare(rowi, coli, chessboard, squares);\n            coli--;\n            rowi--;\n        }\n        limit = false;\n        coli = this.col + 1, rowi = this.row - 1;\n        while (coli <= maxCol && rowi >= 0 && limit == false) {\n            limit = this.addSquare(rowi, coli, chessboard, squares);\n            coli++;\n            rowi--;\n        }\n        limit = false;\n        coli = this.col + 1;\n        rowi = this.row + 1;\n        while (coli <= maxCol && rowi <= maxRow && limit == false) {\n            limit = this.addSquare(rowi, coli, chessboard, squares);\n            coli++;\n            rowi++;\n        }\n        limit = false;\n        coli = this.col - 1;\n        rowi = this.row + 1;\n        while (coli >= 0 && rowi <= maxRow && limit == false) {\n            limit = this.addSquare(rowi, coli, chessboard, squares);\n            coli--;\n            rowi++;\n        }\n        return squares;\n    };\n    Queen.prototype.getAttackedSquares = function () {\n        var protectedSquares = this.getProtectedSquares();\n        return this.removeSquaresWithSameColorPieces(protectedSquares);\n    };\n    Queen.prototype.addSquare = function (row, col, chessboard, squares) {\n        var limit = false;\n        var square = chessboard.getSquare(row, col);\n        if (square.piece) {\n            limit = true;\n            //if (square.piece.isWhite != this.isWhite){\n            //there is a piece of the other color, queen can capture, except the king\n            // let isNotKing =!(square.piece instanceof King)\n            // if(isNotKing)\n            squares.push(square);\n            //}\n        }\n        else {\n            squares.push(square);\n        }\n        return limit;\n    };\n    Queen.prototype.getAttackedSquaresLine = function (targetCol, targetRow) {\n        var moves = this.getPossibleMoves();\n        var line = [];\n        for (var i = 0; i < moves.length; i++) {\n            var difrows = Math.abs(moves[i].row - targetRow);\n            var difcols = Math.abs(moves[i].col - targetCol);\n            var samediagonal = difrows == difcols;\n            var samecolOrRow = moves[i].col == targetCol || moves[i].row == targetRow;\n            if (samediagonal || samecolOrRow)\n                line.push(moves[i]);\n        }\n        return line;\n    };\n    Queen.prototype.getPossibleMoves = function () {\n        var attacked = this.getAttackedSquares();\n        var posibleSquares = [];\n        for (var i = 0; i < attacked.length; i++) { //filter if the attacked square is the other king\n            var square = attacked[i];\n            var isOtherKing = square.piece && square.piece.isWhite != this.isWhite && square.piece instanceof _king__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n            if (!isOtherKing)\n                posibleSquares.push(square);\n        }\n        return posibleSquares;\n    };\n    Queen.prototype.isSquareOnXRay = function (row, col) {\n        //check diagonals\n        if (this._isInLine(col, row, -1, 1))\n            return true;\n        if (this._isInLine(col, row, 1, 1))\n            return true;\n        if (this._isInLine(col, row, 1, -1))\n            return true;\n        if (this._isInLine(col, row, -1, -1))\n            return true;\n        //check vertical\n        if (this._isInLine(col, row, 0, 1))\n            return true;\n        if (this._isInLine(col, row, 0, -1))\n            return true;\n        //check horizontal\n        if (this._isInLine(col, row, 1, 0))\n            return true;\n        if (this._isInLine(col, row, -1, 0))\n            return true;\n        return false;\n    };\n    Queen.prototype._isInLine = function (x, y, dirX, dirY) {\n        var isInline = false;\n        var px = this.col + dirX;\n        var py = this.row + dirY;\n        var maxCol = this.chessboard.getMaxCol();\n        var maxRow = this.chessboard.getMaxRow();\n        while (this._isInside(px, py, maxCol, maxRow)) {\n            if (px == x && py == y)\n                return true;\n            px = px + dirX;\n            py = py + dirY;\n        }\n        return isInline;\n    };\n    Queen.prototype._isInside = function (x, y, maxCol, maxRow) {\n        return x >= 0 && y >= 0 && x <= maxCol && y <= maxRow;\n    };\n    return Queen;\n}(_piece__WEBPACK_IMPORTED_MODULE_1__[\"default\"]));\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Queen);\n\n\n//# sourceURL=webpack://chessboard/./src/core/queen.ts?");

/***/ }),

/***/ "./src/core/rook.ts":
/*!**************************!*\
  !*** ./src/core/rook.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _piece__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./piece */ \"./src/core/piece.ts\");\n/* harmony import */ var _pieces__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pieces */ \"./src/core/pieces.ts\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\nvar Rook = /** @class */ (function (_super) {\n    __extends(Rook, _super);\n    function Rook(isWhite) {\n        var _this = _super.call(this, isWhite) || this;\n        _this.className = (isWhite) ? _pieces__WEBPACK_IMPORTED_MODULE_1__[\"default\"].L_ROOK : _pieces__WEBPACK_IMPORTED_MODULE_1__[\"default\"].D_ROOK;\n        return _this;\n    }\n    Rook.prototype.copy = function () {\n        var newPiece = new Rook(this.isWhite);\n        this.copyBase(newPiece);\n        return newPiece;\n    };\n    Rook.prototype.getAttackedSquares = function () {\n        var protectedSquares = this.getProtectedSquares();\n        var squares = this.removeSquaresWithSameColorPieces(protectedSquares);\n        return squares;\n        /* var filterSquaresWithPiecesSameColor = [];\n \n         for(let i = 0; i < protectedSquares.length; i++){\n             let square = protectedSquares[i];\n \n             if(square.piece){\n                 if(square.piece.isWhite != this.isWhite){\n                     filterSquaresWithPiecesSameColor.push(square);\n                 }\n             }\n             else{\n                 filterSquaresWithPiecesSameColor.push(square);\n             }\n         }\n         \n         return filterSquaresWithPiecesSameColor;*/\n    };\n    Rook.prototype.getProtectedSquares = function () {\n        var squares = [];\n        var chessboard = this.chessboard;\n        var maxc = chessboard.getMaxRow();\n        var maxr = chessboard.getMaxCol();\n        var limit = false;\n        for (var icol = this.col + 1; icol <= maxc && limit == false; icol++) {\n            limit = this.addSquare(this.row, icol, squares);\n        }\n        limit = false;\n        for (var icol = this.col - 1; icol >= 0 && limit == false; icol--) {\n            limit = this.addSquare(this.row, icol, squares);\n        }\n        limit = false;\n        for (var irow = this.row + 1; irow <= maxr && limit == false; irow++) {\n            limit = this.addSquare(irow, this.col, squares);\n        }\n        limit = false;\n        for (var irow = this.row - 1; irow >= 0 && limit == false; irow--) {\n            limit = this.addSquare(irow, this.col, squares);\n        }\n        return squares;\n    };\n    Rook.prototype.getPossibleMoves = function () {\n        return this.getAttackedSquares();\n    };\n    Rook.prototype.getAttackedSquaresLine = function (targetCol, targetRow) {\n        var squares = [];\n        var moves = this.getPossibleMoves();\n        for (var i = 0; i < moves.length; i++) {\n            if (moves[i].col == targetCol || moves[i].row == targetRow)\n                squares.push(moves[i]);\n        }\n        return squares;\n    };\n    Rook.prototype.addSquare = function (row, col, squares) {\n        var chessboard = this.chessboard;\n        var limit = false;\n        var square = chessboard.getSquare(row, col);\n        if (square.piece) {\n            limit = true;\n            //if (square.piece.isWhite != this.isWhite)\n            squares.push(square);\n        }\n        else {\n            squares.push(square);\n        }\n        return limit;\n    };\n    //should return true if the square is attacked by the piece, even if there are other pieces in the middle\n    Rook.prototype.isSquareOnXRay = function (row, col) {\n        if (this.col == col || this.row == row)\n            return true;\n        return false;\n    };\n    return Rook;\n}(_piece__WEBPACK_IMPORTED_MODULE_0__[\"default\"]));\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Rook);\n\n\n//# sourceURL=webpack://chessboard/./src/core/rook.ts?");

/***/ }),

/***/ "./src/core/square.ts":
/*!****************************!*\
  !*** ./src/core/square.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar Square = /** @class */ (function () {\n    function Square() {\n        this.piece = null;\n    }\n    Square.prototype.copy = function () {\n        var newSquare = new Square();\n        if (this.piece != null)\n            newSquare.piece = this.piece.copy();\n        return newSquare;\n    };\n    return Square;\n}());\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Square);\n\n\n//# sourceURL=webpack://chessboard/./src/core/square.ts?");

/***/ }),

/***/ "./src/app.js":
/*!********************!*\
  !*** ./src/app.js ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_board__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/board */ \"./src/core/board.ts\");\n/* harmony import */ var _core_computer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core/computer */ \"./src/core/computer.ts\");\n/* harmony import */ var _core_position__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core/position */ \"./src/core/position.ts\");\n/* harmony import */ var _core_ui__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./core/ui */ \"./src/core/ui.js\");\n\r\n\r\n\r\n\r\n\r\n(function(){\r\n\r\n    var chessboard = null;\r\n    var ui = null;\r\n\r\n\r\n    var init =  function()\r\n    {\r\n        chessboard = new _core_board__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n        ui = new _core_ui__WEBPACK_IMPORTED_MODULE_3__[\"default\"](\".chessboard\", chessboard);\r\n\r\n        let position = new _core_position__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\r\n        position.setupDefault(chessboard);\r\n        //position.setupFromFen(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\", chessboard);\r\n        //position.setupFromFen(\"8/8/8/1Q6/8/8/k1K5/8 w - - 0 1\", chessboard);\r\n        //position.setupFromFen(\"5NR1/5BKP/8/4b1k1/8/8/8/8 b - - 0 1\", chessboard);\r\n        //position.setupFromFen(\"8/7b/1k6/1q6/8/8/KPP5/2B5 b - - 0 1\", chessboard);\r\n        //chessboard.setBlackTurn();\r\n\r\n        ui.draw();\r\n        \r\n        var computer = new _core_computer__WEBPACK_IMPORTED_MODULE_1__[\"default\"](chessboard);\r\n        computer.isWhite = !chessboard.isWhiteTurn;\r\n        \r\n        chessboard.onAfterMove = function()\r\n        {\r\n            computer.move();\r\n            ui.draw();\r\n        } \r\n    }\r\n    \r\n    window.onload  = init;\r\n})();\r\n\n\n//# sourceURL=webpack://chessboard/./src/app.js?");

/***/ }),

/***/ "./src/core/ui.js":
/*!************************!*\
  !*** ./src/core/ui.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ChessboardIU)\n/* harmony export */ });\nfunction ChessboardIU(selector, chessboard)\r\n{\r\n    var self = this;\r\n    this.container = selector;\r\n    this.elem = null;\r\n    this.chessboard = chessboard;\r\n    this.dragPieces = null;\r\n    \r\n    this.pickedPiece = null;\r\n    this.originPickedPiece = null;\r\n\r\n   this.draw = function(chessboard)\r\n    {\r\n        var chessboard = this.chessboard;\r\n          var squares = document.querySelectorAll(this.container + \" .row .square\");\r\n\r\n         for(var i = 0; i < squares.length; i++ )\r\n         {\r\n         \r\n                var domSquare = squares[i];\r\n                var col = i % 8; \r\n                var row = parseInt( i / 8);\r\n                \r\n                var r = chessboard.squares[7 - row];\r\n                var sq = r[col];\r\n\r\n                if(sq.piece == null)\r\n                {\r\n                    domSquare.innerHTML = \"\";\r\n                }\r\n                else\r\n                {\r\n                    var className = \"piece \" + sq.piece.className;\r\n                    domSquare.innerHTML = \"<div class='\" + className + \"'> </div>\";\r\n                }\r\n\r\n         }\r\n    }\r\n\r\n\r\n   \r\n    this._init = function()\r\n    {\r\n        this.dragPieces = new DraggPieces(this.container);\r\n        this.dragPieces.OnDropPiece = OnDroppedPiece;\r\n        this.dragPieces.OnPickPiece = OnPickPiece;\r\n    }\r\n\r\n    this._drawAttacked = function(squares)\r\n    {\r\n\r\n        squares.forEach(s => {\r\n          var elem = self._getSquare(s.col, s.row);\r\n          \r\n          if(elem)\r\n          {\r\n              elem.className += \" attacked\";\r\n          }\r\n          \r\n        });\r\n    }\r\n\r\n    this._drawUnattacked = function()\r\n    {\r\n        var squares = document.querySelectorAll(this.container + \" .row .square\");\r\n\r\n        for(var i = 0; i < squares.length; i++)\r\n        {\r\n            var square = squares[i];\r\n\r\n            var index = square.className.indexOf(\"attacked\");\r\n            \r\n            if(index > -1)\r\n            {\r\n                var firstPart =  square.className.substring(0, index );\r\n                var secondPart =  square.className.substring(index + 8, square.className.length );\r\n\r\n                square.className = firstPart + \" \" + secondPart;\r\n\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n    this._getSquare = function(col, row)\r\n    {\r\n        var id = self.chessboard.convertPositionToString(col, row);\r\n        var squareElem = null;\r\n        \r\n        if(id)\r\n        {\r\n            squareElem = document.getElementById(id);\r\n        }\r\n        \r\n        return squareElem;\r\n    }\r\n    \r\n    var OnDroppedPiece = function( square)\r\n    {\r\n        var clone = self.pickedPiece.cloneNode(true);\r\n        \r\n        if(square == null)//if the piece wasn't dropped on a square, move the piece to the original square\r\n        {\r\n            self.originPickedPiece.appendChild(clone);\r\n        }\r\n        else{\r\n        \r\n            var originSquareString = getSquareString(self.originPickedPiece);\r\n            var destinySquareString = getSquareString(square);\r\n\r\n            if(self.chessboard.isValidMove(originSquareString, destinySquareString))\r\n            {\r\n                if(square.children.length > 0)\r\n                    square.removeChild(square.children[0]);\r\n                    \r\n                square.appendChild(clone);\r\n                    \r\n                self.chessboard.move(originSquareString, destinySquareString);\r\n\r\n                if(self.chessboard.isCheckMate())\r\n                    window.alert(\"Check mate\");\r\n\r\n                self.draw();\r\n            }\r\n            else\r\n            {\r\n                self.originPickedPiece.appendChild(clone);\r\n            }\r\n        }\r\n\r\n        self._drawUnattacked();\r\n        \r\n       self.pickedPiece.remove();\r\n       self.pickedPiece = null;\r\n       self.originPickedPiece = null;\r\n    }\r\n    \r\n    var OnPickPiece = function(pickecPiece, originSquare )\r\n    {\r\n        var originSquareString = getSquareString(originSquare);\r\n        \r\n        var piece = self.chessboard.getPiece(originSquareString);\r\n        \r\n        if(piece != null)\r\n        {\r\n            var squares = piece.getPossibleMoves(self.chessboard);\r\n            self._drawAttacked(squares);\r\n        }\r\n\r\n\r\n        self.originPickedPiece = originSquare;\r\n        self.pickedPiece = pickecPiece.cloneNode(true);\r\n        pickecPiece.remove();\r\n    }\r\n\r\n    var getSquareString = function(square)\r\n    {\r\n        return square.id;\r\n    }\r\n\r\n    this._init();\r\n    \r\n}\r\n\r\nfunction DraggPieces(container)\r\n{\r\n    this.OnPickPiece = null;\r\n    this.OnDropPiece = null;\r\n    this.container = container;\r\n    this.elem = null;\r\n\r\n    var draggingElement = null;\r\n    var isMouseDown = false;\r\n    var squareOrigin = null;\r\n    var self = this;\r\n    \r\n    var mouseX = 0;\r\n    var mouseY = 0;\r\n\r\n    this._init = function()\r\n    {\r\n        this.elem = document.querySelectorAll(this.container);\r\n        var squares = document.querySelectorAll(this.container + \" .row .square\");\r\n        \r\n        for(var i = 0; i < squares.length; i++)\r\n        {\r\n            var domSquare = squares[i];\r\n\r\n            \r\n            domSquare.addEventListener(\"mousedown\", this._mouseDown, true);\r\n            domSquare.addEventListener(\"mouseup\", this._mouseUp, true);\r\n        }\r\n        \r\n        document.body.addEventListener(\"mouseup\", this._mouseUp, false);\r\n    }\r\n\r\n   \r\n    this._mouseDown = function(e)\r\n    {\r\n        //prevents the on drag start event, avoiding clonflics\r\n        e.preventDefault();\r\n        var square = this;\r\n        var piece = square.querySelector(\".piece\");\r\n\r\n        if(piece != null)\r\n        {\r\n            squareOrigin = square;\r\n            \r\n            mouseX = e.clientX;\r\n            mouseY = e.clientY;\r\n            \r\n            isMouseDown = true;\r\n            var rect = piece.getBoundingClientRect();\r\n            \r\n            draggingElement = piece.cloneNode(true);\r\n            draggingElement.className += \" dragging\";\r\n            draggingElement.style.top = rect.y + \"px\";\r\n            draggingElement.style.left = rect.x + \"px\";\r\n\r\n            document.body.appendChild(draggingElement);\r\n           \r\n            document.body.addEventListener(\"mousemove\", self._mouseMove, false);\r\n\r\n            if(self.OnPickPiece instanceof Function)\r\n                self.OnPickPiece(piece, squareOrigin);\r\n\r\n        } \r\n    }\r\n    \r\n    this._mouseMove = function(e)\r\n    {\r\n        if(!isMouseDown)\r\n        {\r\n            return;\r\n        }\r\n\r\n        var deltaX = e.clientX - mouseX;\r\n        var deltaY = e.clientY - mouseY;\r\n        \r\n        var rect = draggingElement.getBoundingClientRect();\r\n\r\n        var newX = rect.x + deltaX;\r\n        var newY = rect.y + deltaY;\r\n\r\n        draggingElement.style.top = newY + \"px\";\r\n        draggingElement.style.left = newX + \"px\";\r\n\r\n        mouseX = e.clientX;\r\n        mouseY = e.clientY;\r\n    }\r\n    \r\n    this._mouseUp = function(e)\r\n    {\r\n        if(!isMouseDown)\r\n            return;\r\n        \r\n        //first stop the move event\r\n      \r\n        isMouseDown = false;\r\n\r\n        //verify if the pieces was dropped in the a square\r\n        var classTarget = e.currentTarget.className;\r\n        var squareDestiny = null;\r\n\r\n        if(classTarget != null && classTarget.includes(\"square\"))\r\n        {\r\n            squareDestiny = e.currentTarget;\r\n        }\r\n       \r\n        \r\n        var clone = draggingElement.cloneNode(true);\r\n        \r\n        clone.className = clone.className.replace(\"dragging\", \"\");\r\n        clone.style.top = '';\r\n        clone.style.left = '';\r\n            \r\n           \r\n        draggingElement.remove();\r\n        document.body.removeEventListener(\"mousemove\", self._mouseMove, false);\r\n        draggingElement = null;\r\n        squareOrigin = null;\r\n        \r\n        if(self.OnDropPiece instanceof Function)\r\n        {\r\n            self.OnDropPiece(squareDestiny);\r\n        }\r\n    }\r\n    \r\n    this._init();\r\n}\r\n\n\n//# sourceURL=webpack://chessboard/./src/core/ui.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/app.js");
/******/ 	
/******/ })()
;